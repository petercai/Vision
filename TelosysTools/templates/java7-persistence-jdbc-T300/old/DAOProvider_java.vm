#parse("include/java_header.vm")

package ${target.javaPackageFromFolder($SRC)};

/**
 * DAO instance provider
 * 
 * @author Telosys Tools
 *
 */
public class DAOProvider {

	/**
	 * Returns a DAO instance implementing the given interface
	 * @param interfaceClass
	 * @return
	 */
	public final static <T> T getDAO(Class<T> interfaceClass) {
		
		String daoClassName = buildDAOClassName(interfaceClass) ;
		try {
			Class<?> daoClass = DAOProvider.class.getClassLoader().loadClass(daoClassName);
			return createDAOInstance(interfaceClass, daoClass) ;
		} catch (ClassNotFoundException e) {
			throw new RuntimeException("Cannot load class " + daoClassName, e );
		}
	}
	
	/**
	 * Builds the DAO class name from the given interface class name
	 * @param interfaceClass
	 * @return
	 */
	private final static String buildDAOClassName(Class<?> interfaceClass) {
		
		String interfaceSimpleName = interfaceClass.getSimpleName();
		
		//--- DAO implementation simple name 
		String implemSimpleName = interfaceSimpleName + "Impl" ; // Default value
		if ( DAOConfiguration.DAO_IMPLEMENTATION_CLASS_SUFFIX != null ) {
			implemSimpleName = interfaceSimpleName + DAOConfiguration.DAO_IMPLEMENTATION_CLASS_SUFFIX.trim() ;
		}
		
		//--- DAO implementation full name (with package)
		Package interfacePackage = interfaceClass.getPackage();
		String interfacePackageName = interfacePackage != null ? interfacePackage.getName()  : "";
		if ( DAOConfiguration.DAO_IMPLEMENTATION_FULL_PACKAGE_NAME != null ) {
			String p = DAOConfiguration.DAO_IMPLEMENTATION_FULL_PACKAGE_NAME.trim() ;
			return p + "." + implemSimpleName ;
		}
		else if ( DAOConfiguration.DAO_IMPLEMENTATION_SUB_PACKAGE_NAME != null ) {
			String p = DAOConfiguration.DAO_IMPLEMENTATION_SUB_PACKAGE_NAME.trim() ;
			return interfacePackageName + "." + p + "." + implemSimpleName ;
		}
		else {
			return interfacePackageName + "." + implemSimpleName ;
		}
	}
	
	/**
	 * Creates a DAO instance using the given DAO class
	 * @param interfaceClass
	 * @param daoClass
	 * @return
	 */
	@SuppressWarnings("unchecked")
	private final static <T> T createDAOInstance(Class<T> interfaceClass, Class<?> daoClass) {
		Object daoInstance = null ;
		try {
			daoInstance = daoClass.newInstance();
		} catch (InstantiationException e) {
			throw new RuntimeException("Cannot create instance for class " + daoClass.getCanonicalName(), e );
		} catch (IllegalAccessException e) {
			throw new RuntimeException("Cannot create instance for class " + daoClass.getCanonicalName(), e );
		}
		if ( interfaceClass.isInstance(daoInstance) ) {
			return (T) daoInstance ;
		}
		else {
			throw new RuntimeException("Class " + daoClass.getCanonicalName() + " does not implement " + interfaceClass.getSimpleName() );
		}
	}
}
