#parse("/include/java_header.vm")

package ${target.javaPackageFromFolder($TEST_SRC)};

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

/**
 * Utility class for JUnit test cases 
 * 
 * @author Telosys 
 *
 */
public class DAOTestUtil {
	
    /**
     * Creates a table that will be used by the DAO tests 
     * @param createTableSQL
     */
    public static void initDatabase(String createTableSQL, String tableName) { 
    	
    	System.out.println("===== initDatabase... ");
    	
    	//--- The datasource as defined in the 'jdbc properties' file  
    	DataSource datasource = DataSourceProvider.getDataSource();
    	
    	//--- Execute the CREATE TABLE SQL statement
    	try {
			createTable(createTableSQL, datasource);
			selectFromTable(tableName, datasource);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException("Error on 'create table'");
		}
    }
    
    private static void createTable(String createTableSQL, DataSource datasource) throws SQLException {
    	System.out.println("create table ...");
    	System.out.println(createTableSQL);
    	Connection conn = datasource.getConnection();
    	Statement stmt = conn.createStatement();
    	int r = stmt.executeUpdate(createTableSQL);
    	System.out.println("create table status : " + r);
    	stmt.close();
    	conn.close();
    }

    private static void selectFromTable(String tableName, DataSource datasource) throws SQLException {
    	String SQL = "SELECT * FROM " + tableName ;
    	System.out.println("Table columns :");
    	System.out.println(SQL);
    	Connection conn = datasource.getConnection();
    	Statement stmt = conn.createStatement();
    	ResultSet rs = stmt.executeQuery(SQL);
    	ResultSetMetaData rsmd =  rs.getMetaData();
    	for ( int c = 1 ; c <= rsmd.getColumnCount() ; c++ ) {
    		System.out.println(" - " + rsmd.getTableName(c) + "." + rsmd.getColumnName(c)); 
    	}
    	rs.close();
    	stmt.close();
    	conn.close();
    }
}
