#parse("include/java_header.vm")

package ${target.javaPackageFromFolder($SRC)};

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.Protocol;

public class ClientProvider {

	/**
	 * The properties file containing the Redis configuration
	 */
	private final static String REDIS_PROPERTIES_FILE_NAME = "/redis.properties";
	private final static String PORT     = "redis.port";
	private final static String PASSWORD = "redis.password";
	private final static String HOST     = "redis.hostname";

	/**
	 * The Jedis instance
	 */
	private final static JedisPool redisPool = createJedisClient();

	/**
	 * Returns the Jedis pool
	 * @return 
	 */
	public static JedisPool getJedisPool() {
		return redisPool;
	}

	/**
	 * Returns the Jedis instance
	 * @return
	 */
	public static Jedis getJedisInstance() {
		return redisPool.getResource() ;
	}

	/**
	 * Returns the Redis properties file name
	 * 
	 * @return name of properties file
	 */
	public static String getRedisPropertiesFileName() {
		return REDIS_PROPERTIES_FILE_NAME;
	}

	/**
	 * Loads the REDIS properties using the class-path to find the file<br>
	 * 
	 * @throws RuntimeException
	 * @return properties file
	 */
	protected static Properties loadRedisPropertiesFromClassPath() {
		return loadPropertiesFromClassPath(REDIS_PROPERTIES_FILE_NAME);
	}

	/**
	 * Creates a Jedis <br>
	 * 
	 * @return new JedisPool
	 */
	private static JedisPool createJedisClient() {
		Properties env = loadRedisPropertiesFromClassPath();
		String stringPort = env.getProperty(PORT);
		String password = env.getProperty(PASSWORD);
		String host = env.getProperty(HOST);
		int port = stringPort.isEmpty() ? Protocol.DEFAULT_PORT : Integer.valueOf(stringPort);
		password = password.equals("") ? null : password;
		host = host.isEmpty() ? Protocol.DEFAULT_HOST : host;
		int timeout = Protocol.DEFAULT_TIMEOUT;
		JedisPoolConfig poolConfig = new JedisPoolConfig();
		return new JedisPool(poolConfig, host, port, timeout, password);
	}

	private static Properties loadPropertiesFromClassPath(String fileName) {
		Properties properties = new Properties();
		InputStream is = ClientProvider.class.getResourceAsStream(fileName);
		if (is != null) {
			try {
				properties.load(ClientProvider.class.getResourceAsStream(fileName));
			} catch (IOException e) {
				throw new RuntimeException("Cannot load '" + fileName + "'", e);
			}
			return properties;
		} else {
			throw new RuntimeException("Cannot found '" + fileName + "' (InputStream is null)");
		}
	}

}
