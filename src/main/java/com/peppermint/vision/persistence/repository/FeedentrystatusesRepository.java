/*
 * Created on 2019-08-02 ( Date ISO 2019-08-02 - Time 22:20:41 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package com.peppermint.vision.persistence.repository;

import java.util.Date;
import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.peppermint.vision.feed.FeedEntryKeyword;
import com.peppermint.vision.persistence.entity.FeedEntry;
import com.peppermint.vision.persistence.entity.FeedEntryStatus;
import com.peppermint.vision.persistence.entity.FeedSubscription;
import com.peppermint.vision.persistence.entity.User;
import com.peppermint.vision.persistence.entity.UserSettings.ReadingOrder;
import com.peppermint.vision.rest.dto.UnreadCount;

/**
 * Spring data Jpa repository for "Feedentrystatuses" <br>
 *
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@Repository
public interface FeedentrystatusesRepository
    extends JpaRepository<FeedEntryStatus, Long>, JpaSpecificationExecutor<FeedEntryStatus> {

  FeedEntryStatus getByUserAndSubscriptionAndEntry(
      User user, FeedSubscription sub, FeedEntry entry);

  @Query(value = "select s from FeedEntryStatus s where s.user = ?1 and s.starred = false")
  List<FeedEntryStatus> findStarred(User user);

  @Query(
      value =
          "select new com.peppermint.vision.rest.dto.UnreadCount( s.entry.feed.id, count(s.id) , s.entryInserted) from FeedEntryStatus s where s.user = ?1 and s.subscription = ?2 group by s.entry.feed")
  UnreadCount getReadCount(User user, FeedSubscription sub);
  @Query(
      value =
          "select new com.peppermint.vision.rest.dto.UnreadCount( s.entry.feed.id, count(s.id) , s.entryInserted) from FeedEntryStatus s where s.user = ?1 and s.subscription = ?2 group by s.entry.feed")
  UnreadCount getUnreadCount(User user, FeedSubscription sub);

//  @Query(
//      value =
//          "Select FEEDENTRIES.feed_id as feedId, Max(Distinct FEEDENTRIES.inserted) As newestItemTime, Count(FEEDENTRIES.id) As unreadCount From FEEDENTRYSTATUSES Right Outer Join FEEDENTRIES On FEEDENTRYSTATUSES.entry_id = FEEDENTRIES.id Where ((FEEDENTRYSTATUSES.id Is Null) Or (FEEDENTRYSTATUSES.read_status = 0)) Group By FEEDENTRIES.feed_id",
//      nativeQuery = true)
//  List<UnreadCount> getUnreadCountAll(User user);
}
